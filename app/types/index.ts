import type { Timestamp } from 'firebase/firestore';

// Base product interface without timestamp types
export interface BaseProduct {
  id: string;
  name: string;
  description: string;
  price: number;
  category: string;
  imageUrl: string;
  cloudinaryPublicId?: string; // Cloudinary public ID for the image
  imageHint: string;
  stock: number;
  rating?: number;
  reviews?: number;
}

export interface Product extends BaseProduct {
  createdAt: Timestamp; // Changed to non-optional, will be set by server
  updatedAt: Timestamp; // Changed to non-optional, will be set by server
}

// Serialized version for client components (Timestamps converted to Date)
export interface SerializedProduct extends BaseProduct {
  createdAt: Date;
  updatedAt: Date;
}

export interface CartItem extends BaseProduct {
  quantity: number;
}

export interface User {
  id: string; // Firebase UID
  email: string | null; // Firebase email can be null
  name?: string;
  role: 'user' | 'admin';
  createdAt: Timestamp; // Changed to non-optional
  updatedAt?: Timestamp; // Optional for now
}

// Type for new product data, excluding fields generated by the system (id, rating, reviews, timestamps)
export type NewProduct = Omit<BaseProduct, 'id' | 'rating' | 'reviews'>;

export interface ShippingAddress {
  fullName: string;
  addressLine1: string;
  addressLine2?: string;
  city: string;
  postalCode: string;
  country: string;
  phoneNumber?: string;
}

export interface OrderItem {
  productId: string;
  productName: string;
  quantity: number;
  price: number;
  imageUrl?: string;
}

export interface Order {
  id: string;
  userId: string;
  userEmail: string;
  items: OrderItem[];
  shippingAddress: ShippingAddress;
  totalAmount: number;
  status: 'pending' | 'processing' | 'shipped' | 'delivered' | 'cancelled';
  paymentMethod: string;
  paymentStatus: 'pending' | 'paid' | 'failed' | 'refunded';
  createdAt: Timestamp;
  updatedAt: Timestamp;
  trackingNumber?: string;
  notes?: string;
}

export interface SerializedOrder extends Omit<Order, 'createdAt' | 'updatedAt'> {
  createdAt: Date;
  updatedAt: Date;
}

